name: Deployment

on:
  push:
    branches:
      - main
      - configuration-management
    tags:
      - 'v*'

jobs:
  build_pipeline:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --prune --unshallow --tags

      # - name: Docker login
      #   uses: docker/login-action@v1
      #   with:
      #     registry: docker.io
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # - name: Set env
      #   run: echo "IMAGE_TAG=$(make -s name)" >> $GITHUB_ENV

      # - name: Install dependencies
      #   run: yarn install

      # - name: Run lint
      #   run: yarn lint

      # - name: Run tests
      #   run: yarn test

      # - name: Build docker image
      #   run: |
      #     make -s build

      # - name: Push docker image
      #   run: |
      #     make -s dockerpush

  terraform:
    name: Terraform
    needs: build_pipeline
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.0.4

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

  # deploy-dev:
  #     runs-on: ubuntu-latest
  #     needs: terraform
  #     environment: development
  #     steps:
  #       - name: Deploy to Dev
  #         run: echo "Deploying to Dev environment"

  # deploy-staging:
  #     runs-on: ubuntu-latest
  #     needs: terraform
  #     environment: staging
  #     steps:
  #       - name: Deploy to Staging
  #         run: echo "Deploying to Staging environment"
  

  # deploy-prod:
  #     runs-on: ubuntu-latest
  #     needs: terraform
  #     environment: prod
  #     steps:
  #       - name: Deploy to Prod
  #         run: echo "Deploying to Prod environment"



  # setup_ec2:
  #   runs-on: ubuntu-latest
  #   needs: build_pipeline
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up environment
  #       run: |
  #         echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
  #         echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
  #         echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.x'

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install botocore boto3

  #     - name: Install Terraform and Ansible
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y unzip
  #         wget https://releases.hashicorp.com/terraform/0.14.7/terraform_0.14.7_linux_amd64.zip
  #         unzip terraform_0.14.7_linux_amd64.zip
  #         sudo mv terraform /usr/local/bin/
  #         sudo apt-add-repository --yes --update ppa:ansible/ansible
  #         sudo apt-get install -y ansible

  #     - name: Run Terraform and Ansible
  #       run: |
  #         # terraform init
  #         # terraform apply -auto-approve
  #         ansible-playbook -i aws_ec2.yml playbook.yml



  # deploy-dev:
  #     runs-on: ubuntu-latest
  #     needs: setup_ec2
  #     environment: development
  #     steps:
  #       - name: Deploy to QA
  #         run: echo "Deploying to Dev environment"

  # deploy-staging:
  #     runs-on: ubuntu-latest
  #     needs: setup_ec2
  #     environment: staging
  #     steps:
  #       - name: Deploy to QA
  #         run: echo "Deploying to Staging environment"
  

  # deploy-prod:
  #     runs-on: ubuntu-latest
  #     needs: setup_ec2
  #     environment: prod
  #     steps:
  #       - name: Deploy to Prod
  #         run: echo "Deploying to Prod environment"


