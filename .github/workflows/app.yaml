name: Deployment

on:
  push:
    branches:
      - main
      - configuration-management
    tags:
      - 'v*'
env:
  TF_CLOUD_ORGANIZATION: "${{ secrets.TF_API_ORG_NAME }}"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "${{ secrets.TF_WORKSPACE }}"
  CONFIG_DIRECTORY: "./terraform/"

jobs:
  build_pipeline:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --prune --unshallow --tags

      - name: Docker login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Set env
        run: echo "IMAGE_TAG=$(make -s name)" >> $GITHUB_ENV

      - name: Install dependencies
        run: yarn install

      - name: Run lint
        run: yarn lint

      - name: Run tests
        run: yarn test

      - name: Build docker image
        run: |
          make -s build

      - name: Push docker image
        run: |
          make -s dockerpush

  terraform:
    name: Terraform
    needs: build_pipeline
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}


      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

  deploy-dev:
    runs-on: ubuntu-latest
    needs: terraform
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set env
        run: echo "IMAGE_TAG=$(make -s name)" >> $GITHUB_ENV

      - name: Configure kubectl for Dev
        run: aws eks --region eu-west-2 update-kubeconfig --name dev-cluster

      - name: Apply Kubernetes Manifests to Dev
        run: |
          sed -i "s|pos-dashboard:latest|pos-dashboard:${IMAGE_TAG}|" kubernetes/deployment.yaml
          kubectl apply -f kubernetes/


  deploy-staging:
    runs-on: ubuntu-latest
    needs: terraform
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set env
        run: echo "IMAGE_TAG=$(make -s name)" >> $GITHUB_ENV

      - name: Configure kubectl for Staging
        run: aws eks --region eu-west-2 update-kubeconfig --name staging-cluster

      - name: Apply Kubernetes Manifests to Staging
        run: |
          sed -i "s|pos-dashboard:latest|pos-dashboard:${IMAGE_TAG}|" kubernetes/deployment.yaml
          kubectl apply -f kubernetes/

  deploy-prod:
    runs-on: ubuntu-latest
    needs: terraform
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set env
        run: echo "IMAGE_TAG=$(make -s name)" >> $GITHUB_ENV

      - name: Configure kubectl for Prod
        run: aws eks --region eu-west-2 update-kubeconfig --name prod-cluster

      - name: Apply Kubernetes Manifests to Prod
        run: |
          sed -i "s|pos-dashboard:latest|pos-dashboard:${IMAGE_TAG}|" kubernetes/deployment.yaml
          kubectl apply -f kubernetes/

